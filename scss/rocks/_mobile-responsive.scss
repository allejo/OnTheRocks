/// Return a breakpoint that is one breakpoint larger than the given breakpoint
///
/// @access private
///
/// @param {Breakpoint} $breakpoint - The given breakpoint

@function next-breakpoint($breakpoint) {
    @return get-next-key($breakpoints, $breakpoint);
}


///
///
/// @access private
///

@function last-breakpoint() {
    @return get-last-key($breakpoints);
}

/// Similar to `respond-to()`, this mixin will restrict the content to only the specified Breakpoint and will not apply
/// to a larger Breakpoint. This mixin will take Breakpoints with no larger or smaller Breakpoints and handle them
/// appropriately with an efficient media query.
///
/// @content
///
/// @param {Arglist} $media_list - Breakpoints that will be individually targeted
///
/// @example scss - Usage
///   .phablets-only {
///       @include respond-only-to(sm) {
///           display: block;
///       }
///   }
///
/// @example css - CSS Output
///   @media only screen and (min-width: 480px) and (max-width: 767px) {
///       .phablets-only {
///           display: block;
///       }
///   }

@mixin respond-only-to($media_list...) {
    @each $media in $media_list {
        $nextBreakPoint: next-breakpoint($media);

        @if $nextBreakPoint == null {
            @include media('>=' + $media) {
                @content;
            }
        }
        @else if map-get($breakpoints, $media) == 0 {
            @include media('<' + $nextBreakPoint) {
                @content;
            }
        }
        @else {
            @include media('>=' + $media, '<' + $nextBreakPoint) {
                @content;
            }
        }
    }
}


/// The specified content will be applied only to a specific range. If the start Breakpoint is `xs`, then it will
/// automatically use only the max-width.
///
/// @content
///
/// @param {Breakpoint} $start - The Breakpoint the media query will be applied from
/// @param {Breakpoint} $end   - The Breakpoint the media query will be applied to
///
/// @example scss - Usage
///   .xs-to-md {
///       @include respond-from(xs, md) {
///           display: block;
///       }
///   }
///
/// @example css - CSS Output
///   @media only screen and (max-width: 992px) {
///       .xs-to-md {
///           display: block;
///       }
///   }

@mixin respond-from($start, $end) {
    $endBreakpoint: next-breakpoint($end);

    @if map-get($breakpoints, $start) == 0 {
        @include media('<' + $endBreakpoint) {
            @content;
        }
    }
    @else {
        @include media('>=' + $start, '<' + $endBreakpoint) {
            @content;
        }
    }
}


///
///
/// @content
///
/// @param {Breakpoint} $viewSize - The Breakpoint the media query will be applied from

@mixin respond-down($viewSize) {
    $lastBreakpoint: last-breakpoint();

    @if $viewSize == $lastBreakpoint {
        @content;
    }
    @else {
        @include media('<=' + $viewSize) {
            @content;
        }
    }
}


/// Have the specified content inside of the mixin respond to the specified Breakpoint and larger.
///
/// @content
///
/// @param {Breakpoint} $media - The Breakpoint (and larger) that will have the specified CSS rules applied to
///
/// @example scss - Usage
///   .phablet-and-larger {
///       @include respond-up(sm) {
///           display: block;
///       }
///   }
///
/// @example css - CSS Output
///   @media only screen and (min-width: 480px) {
///       .phablet-and-larger {
///           display: block;
///       }
///   }

@mixin respond-up($viewSize) {
    @if map-get($breakpoints, $viewSize) == 0 {
        @content;
    }
    @else {
        @include media('>=' + $viewSize) {
            @content;
        }
    }
}
